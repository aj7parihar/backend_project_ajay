spring.application.name=Product_Service_Class_110524

#for logging
logging.level.org.springframework.web: DEBUG

server.port=8081

#spring.jpa.hibernate.ddl-auto=update
## Don't just directly update the queries that we are executing (see above)
## First validate them (see below):
spring.jpa.hibernate.ddl-auto=validate

# We have mentioned our DB URL, Username & might mention password as well, which is not a good practice because
# we are storing our project in repo where anyone can see the details.
# Hence, we need to find a way to overcome this.

# Environment Variables - Every machine (OS) will have its environment variables where we save such details.
# So that they are safe enough.

# Hence the machine on which our application will run (which will also be server for our application), we will go
# that machine and save these credentials in environment variables.

# There are few ways to store the values in env. variables.
# 1. Through got terminal (did this)
# export PROD_SERV_DB_URL=db-product-service-100624.cjegqg80gkz7.ap-south-1.rds.amazonaws.com
## export PROD_SERV_DB_NAME=product_service
## export PROD_SERV_DB_USER_NAME=product_service_may_24

# 2. In Application properties configuration (doing here so that while exporting jar package this will also be there)
# spring application run dropdown --> edit config. --> Modify option --> Check Env. variables and provide
# above three thing separated via semicolon (without export command)

# Problem in setting the env. variables in application?
# The problem is when we were creating a jar file (intelliJ --> Maven --> Product Service Class -->
# LifeCycle --> package --> double click --> it should start packaging) it failed stating unknown PROD_SERV_DB_URL
# That means Maven is not reading the env. variables from Application Context

# As a workaround we tried to restart the IntelliJ and reloading pom.xml, but it failed with
# same error "com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure"

# Why it failed - because the application context environment variable is different from the env.
# of the Maven (Application is running on the different machine than Maven??????).
# Hence, if I want to persist the env. variables forever whenever the shell is invoked, for this there is
# utility (every shell will have a utility) called
# Create env. variable in the "~/.bashrc" (for windows) and "~/.zshrc" (for mac)
# if no "~/.bashrc", then create using "vim ~/.bashrc"
# set up the env. variables there (those 3 exp"ort commands).
# cat ~/.bashrc or less ~/.bashrc --> to view the content of bashrc file where we created env. variables
# printenv -- list all the env variables
# in sorted order "printenv | sort" ==> "|" --> this is pipe

#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/product_service
#spring.datasource.url=jdbc:mysql://db-product-service-100624.cjegqg80gkz7.ap-south-1.rds.amazonaws.com:3306/product_service
#spring.datasource.username=product_service_may_24
#spring.datasource.password=ThePassword

#git commit -m "Class:28052024, AWS Elastic Beanstalk Creation (EBS), Removed the depenedency of creating a separate EC2, now everything, from EC2 creatio
#n to jar upload, deployment, application autoscaling, load balancing, health monitoring, etc.,  will be done by EBS."
#On branch ownDBFeature

spring.datasource.url=jdbc:mysql://${PROD_SERV_DB_URL}:3306/${PROD_SERV_DB_NAME}
spring.datasource.username=${PROD_SERV_DB_USER_NAME}
#spring.datasource.password=ThePassword

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql = true

